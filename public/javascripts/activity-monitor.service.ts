/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DataService } from 'src/app/base/service/data.service';
import 'rxjs/add/operator/map';
import { LoggerService } from 'src/app/base/service/logger.service';
import { Subject } from 'rxjs/Subject';
import { MateoQueue, MateoQueueStatus, IMeteoPageResultSet } from 'src/app/base/models/mateoQueue';
import { MateoApiServiceHandle } from 'src/app/base/service/data.service';
import { ApplicationException } from 'src/app/base/error/exception';
import { FMPHelper } from 'src/Constants/helpers';
import {
    ActivityMonitorDataModel, IEquipmentRequest, EquipmentRequestQueryModel
} from '../models/activitymonitor/activitymonitor';

@Injectable({
    providedIn: 'root'
})
export class ActivitymonitorService extends DataService {
    public activityMonitorData;
    dataModel: ActivityMonitorDataModel;
    public equipmentRequestsApiObservable = new Subject<IMeteoPageResultSet<IEquipmentRequest>>();
    public equipmentRequestsTCOApiObservable = new Subject<IEquipmentRequest>();
    public equipmentRequestsErrorObservable = new Subject<ApplicationException>();
    public pdfGridHeader = new Subject<any>();
    public pdfGridData = new Subject<any>();
    constructor(private _http: HttpClient, public _loggerService: LoggerService, private mateoHandle: MateoApiServiceHandle) {
        super('', '', _http, _loggerService);
        this.dataModel = new ActivityMonitorDataModel();
    }

    /**
     *  This method is used to generate request for EquipmentRequestAPI
     *
     * @param {EquipmentRequestQueryModel} queryModel
     * @returns {EquipmentRequestQueryModel}
     * @memberof ActivitymonitorService
     */
    getEquipmentQueryData(queryModel: EquipmentRequestQueryModel): EquipmentRequestQueryModel {
        let url = `${FMPHelper.ApplicationSettings.mateoEquipmentRequestAPI}query?`;
        const queryParameters: Map<string, string> = new Map<string, string>();
        if (queryModel.Site) {
            queryParameters.set('productLine', queryModel.Site.segment);
            queryParameters.set('siteCode', queryModel.Site.workLocation);
        }
        if (queryModel.DateRangeSearchFrom && queryModel.DateRangeSearchTo) {
            queryParameters.set('startDate', new Date(FMPHelper.FormatDate(queryModel.DateRangeSearchFrom, 'YYYY-MM-DDT00:00:00'))
                .toISOString());
            queryParameters.set('endDate', new Date(FMPHelper.FormatDate(queryModel.DateRangeSearchTo, 'YYYY-MM-DDT23:59:59'))
                .toISOString());
        }
        if (queryModel.Job) {
            queryParameters.set('jobNumber', queryModel.Job.jobNumber);
        }
        if (queryModel.TCO_Status) {
            queryParameters.set('status', queryModel.TCO_Status.join(','));
        }
        if (queryModel.pageNumber) {
            queryParameters.set('pageNumber', queryModel.pageNumber.toString());
        }
        if (queryModel.pageSize) {
            queryParameters.set('pageSize', queryModel.pageSize.toString());
        }
        // Use base method to convert parameter map to query string.
        const querystring = this.createQueryString(queryParameters);
        if (queryModel.Site && querystring.length > 0) {
            url = url + querystring;
            const mateoQueue: MateoQueue<IMeteoPageResultSet<IEquipmentRequest>>
                = new MateoQueue<IMeteoPageResultSet<IEquipmentRequest>>(url);
            mateoQueue.callbackSubject = this.equipmentRequestsApiObservable;
            mateoQueue.errorCallbackSubject = this.equipmentRequestsErrorObservable;
            mateoQueue.processStatusFnRef = this.HandelEquipmentRequestPollingStatus;
            this.mateoHandle.HandleMateoGet(mateoQueue);
            queryModel.QueueItem = mateoQueue;
        } else {
            queryModel.QueueItem = null;
        }
        return queryModel;
    }

    /**
     * This method is used to generate request for EquipmentRequestAPI based on TCO
     *
     * @param {EquipmentRequestQueryModel} queryModel
     * @returns {EquipmentRequestQueryModel}
     * @memberof ActivitymonitorService
     */
    getEquipmentTCOData(queryModel: EquipmentRequestQueryModel): EquipmentRequestQueryModel {
        let url = `${FMPHelper.ApplicationSettings.mateoEquipmentRequestAPI}`;
        if (queryModel.TCONumber) {
            url = url + queryModel.TCONumber;
            const mateoQueue: MateoQueue<IEquipmentRequest> = new MateoQueue<IEquipmentRequest>(url);
            mateoQueue.callbackSubject = this.equipmentRequestsTCOApiObservable;
            mateoQueue.errorCallbackSubject = this.equipmentRequestsErrorObservable;
            mateoQueue.processStatusFnRef = this.HandelEquipmentRequestPollingStatus;
            this.mateoHandle.HandleMateoGet(mateoQueue);
            queryModel.QueueItem = mateoQueue;
        }
        return queryModel;
    }

    HandelEquipmentRequestPollingStatus(queue: MateoQueue<any>, body: any) {
        if (body && body.equipmentRequestStatus) {
            if (body.equipmentRequestStatus === 3 || body.equipmentRequestStatus === 4) {
                queue.status = MateoQueueStatus.FAILED;
            }
        }
    }

    getPdfGridHeader(data) {
        this.pdfGridHeader.next(data);
    }

    getPdfData(data){
        this.pdfGridData.next(data);
    }
}
